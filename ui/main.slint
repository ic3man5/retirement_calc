import { LineEdit , Button, GridBox} from "std-widgets.slint";

export component NumberField inherits Rectangle {
    in property <string> title: "Default title here";
    in-out property text <=> txt.text;
    in-out property placeholder_text <=> txt.placeholder_text;
    in property <string> prefix_text: "";
    in property <string> suffix_text: "";
    in property <string> tooltip_text: "";
    in property <int> title_font_size: 14;
    in property <int> entry_font_size: 14;

    callback edited <=> txt.edited;

    preferred-width: 100%;
    min-height: 58px;
    min-width: 50px;
    border-color: white;
    border-radius: 10px;
    border-width: 1px;
    background: black;
    horizontal-stretch: 0;

    // Title
    Text {
        x: 8px;
        y: 4px;

        font-size: title_font_size * 1px;
        text: title;
    }
    // Text Entry field
    txt := LineEdit {
        x: 35px;
        y: 24px;
        height: 24px;
        width: root.width - 40px;
        
        font-size: entry_font_size * 1px;
    }
    // Prefix
    Text {
        x: 2px;
        y: 28px;
        min-width: 30px;
        font-size: 14px;
        text: prefix-text;
        horizontal-alignment: right;
    }

    // Suffix
    Text {
        x: root.width - 10px - self.width;
        y: 28px;
        min-width: 30px;
        font-size: 14px;
        text: suffix-text;
        horizontal-alignment: right;
    }
    // Question mark
    Rectangle {
        x: parent.width - 20px;
        y: 4px;
        width: 16px;
        height: 16px;
        border-radius: 5px;
        //background: blue;

        Text {
            text: "?";
            color: white;
            font-size: 14px;
        }
    }
}

export component MainWindow inherits Window {
    title: "Retirement Calculator";
    //width: 800px;
    //height: 600px;
    min-width: 800px;
    min-height: 500px;
    out property current_age <=> CurrentAgeField.value;
    out property death_age <=> AgeOfDeathField.value;
    out property retirement_age <=> RetirementAgeField.value;
    out property social_security_age <=> SSAgeField.value;
    out property starting_balance <=> StartingBalanceField.value;
    out property social_security_monthly <=> SSMonthlyIncomeField.value;
    out property monthly_contribution <=> MonthlyContributionField.value;
    out property yield_before_retirement <=> YieldBeforeField.value;
    out property yield_after_retirement <=> YieldAfterField.value;
    out property inflation_rate <=> InflationRateField.value;
    out property annual_income_post <=> AnnualIncomePostField.value;
    out property annual_income_post_decay <=> AnnualIncomePostDecayField.value;
    in-out property temp_result <=> ResultText.value;

    callback calculate();

    VerticalLayout {
        GridBox { 
            spacing: 10px;
            padding: 10px;
            Row {
                CurrentAgeField := NumberField {
                    title: "Current Age";
                    suffix-text: "years";
                    placeholder-text: self.value;
                    property <float> value: 36;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                AgeOfDeathField := NumberField {
                    title: "Age of Death";
                    suffix-text: "years";
                    placeholder-text: self.value;
                    property <float> value: 85;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
            }
            Row {
                RetirementAgeField := NumberField {
                    title: "Retirement Age";
                    suffix-text: "years";
                    placeholder-text: self.value;
                    property <float> value: 59.5;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                SSAgeField := NumberField {
                    title: "Social Security Age";
                    suffix-text: "years";
                    placeholder-text: self.value;
                    property <float> value: 67;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
            }
            Row {
                StartingBalanceField := NumberField {
                    title: "Starting Balance";
                    prefix-text: "$";
                    placeholder-text: self.value;
                    property <float> value: 20000;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                SSMonthlyIncomeField := NumberField {
                    title: "Social Security Monthly Income";
                    prefix-text: "$";
                    placeholder-text: self.value;
                    property <float> value: 3500;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                MonthlyContributionField := NumberField {
                    title: "Monthly Contribution";
                    prefix-text: "$";
                    placeholder-text: self.value;
                    property <float> value: 1000;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
            }
            Row {
                YieldBeforeField := NumberField {
                    title: "Investment yield before retirement";
                    suffix-text: "%";
                    placeholder-text: self.value;
                    property <float> value: 7.0;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                YieldAfterField := NumberField {
                    title: "Investment yield after retirement";
                    suffix-text: "%";
                    placeholder-text: self.value;
                    property <float> value: 7.0;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                InflationRateField := NumberField {
                    title: "Inflation rate";
                    suffix-text: "%";
                    placeholder-text: self.value;
                    property <float> value: 3.0;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
            }
            Row {
                AnnualIncomePostField := NumberField {
                    title: "Annual income needed post-retirement";
                    suffix-text: "%";
                    placeholder-text: self.value;
                    property <float> value: 7.0;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
                AnnualIncomePostDecayField := NumberField {
                    title: "Annual income post-retirement decay";
                    suffix-text: "%";
                    placeholder-text: self.value;
                    property <float> value: 10.0;
                    edited(string) => {
                        if (self.text.is-float()) {
                            self.value = self.text.to-float();
                        } else {
                            self.value = self.placeholder_text.to-float();
                        }
                    }
                }
            }
        }
        ResultText := Text {
            property <string> value: "$0.0";
            horizontal-alignment: center;
            vertical-alignment: center;
            text: self.value;
            font-size: 16px;
            //color: black;
        }
        Button { 
            text: "Calculate";
            clicked => {
                root.calculate();
            }
        }
        LineGraphImage :=  Image {
            //width: parent.width;
            height: 300px;
            //source: @image-url("images/test.png");
            //background: white;
            TempText := Text {
                horizontal-alignment: center;
                vertical-alignment: center;
                text: "Line Graph will go here";
                font-size: 20px;
                color: black;
            }
        }
        
        Button { 
            text: "Export";
        }
    }
}
